Refactor to move all memberlist modification code to member.h
    this will make the locking easier to handle

Fix race condition first
    need to be careful here since some memberlist functions are called within itself, recursivly locking if we have multiple locks

I think this actually may be a race condition (90% positive this is the issue)
    gossip is running on a thread, and may cleanup nodes
    BUT handle message is running on a different thread that may also update memberlist
    will need a lock to prevent this by adding a mutex to member_list
    will need to make a memberlist_destroy function to free mutex too

    Big problem is we have memberlist split across node.c and member.c, BUT
    we need to lock the global member_list when ever used.

    Move ALL member related functions to member.h, and have functions take
        in heartbeats and timestamps as arguments rather than relying on global state in node.c

Renaming member_list to memberlist might be a good idea to simplify reading

peer joins successfully tests
    start node 3000
    start node 3001
    ...
    start node 3007

    All 8 nodes should log peers that join/leave
    Ensure that all 8 logs contain 8 joins and 0 fails

Tests need to be quick, so maybe consider setting T_FAIL/T_CLEANUP to make testing fast - can do this after 

peer can't connect to introducer
    start node 3001
    ...
    start node 3007

    Ensure that all 7 logs contain 1 join each and 0 fails

write membership tests
    peer joins successfully
        should be checking logs
    peer fails joins (introducer down)
    one peer fails
    less than half peers fail
    more than half peers fail
    all non-introducer peers fail
    introducer fails
    introducer rejoins

MP3 (distributed file system)
    How should files be stored?  Who stores them?
    write a disk_scheduler


Strange bug with having to resend requests that fail sometimes...
    node_send_msg is using sleep to try up to 4 times
    why is this necessary?  Are connections dropped due to listener spending too much time copying message into message queue?
    If that's the case, can spawning a thread to handle this in the listener (so that the listener thread only makes connections)
    make hit error less likely?
