Tests run fine now (no they don't).  Still hangs sometimes
    could try to run similar test on the practice programs (server.c and client.c) to
    see if its an issue with the grepping or something else

    Alternatively, could try to rewrite dgrep.c and node.c to simplify
    the code (using the queue to split up recving/handling messages)

    Use a queue in dgrep.c and node.c to simplify receiving and handling messages
    Problem should make a new function called recv_msgs that


    Put this in msg.h so that node.c and dgrep.c can both use it

        void *recv_msgs(void *arg) {
            int serverfd = net_listen(arg);

            while (true) {
                struct msg msg;
                if (node_recv_msg(serverfd, &handler_queue->arena, &msg)) {
                    msg_queue_enqueue(handler_queue, &msg);
                }
            }
        }



A node introduces itself to introducer
    uses tcp socket to connect to introducer
    introducer adds requester to own membership list
    introducer sends requester membership list
    end tcp connection

    Need to make a tagged union to handle different message types
        MT_DGREP
        MT_JOIN_REQ
        MT_JOIN_RES

Membership protocol
    introducer and new nodes use tcp to make initial connection
    this allows introducer to update its own membership list and new node to get the initial membership list
    after this, at intervals the gossip protocol should occur (including the introducer) using a UDP connection
    will need to add UDP sockets to net.h

Each node will keep an array of messages it receives and reads them when necessary
    this allows us to not worry about connections (and to use UDP)

Nodes send messages to eachother at at set time interval
Nodes maintain a list of know members to gossip with
A single node is the introduce (port 3000), and all nodes first gossip with this node on startup

Implement a membership protocol (let's try gossip style heartbeating with fail/delete and suspicion)
    Consider looking at/using the API provided by the Coursera MP1 project
    failure must be reflected at one node within 3 seconds
        this requires heart-beating at least once per 1.5 seconds (if using 1.5 seconds for TFAIL and 1.5 seconds for TDELETE)
    failure must be reflected in all nodes within 6 seconds
    each machine must join with a version number (using fail-stop rather than fail-recovery model)
    use UDP for membership messaging
    log all joins, voluntary leaves and failures
    Implement a way to drop messages on receiver end (default to 0%)

Implement distributed system visualizer using SDL3
    Use logs to replay nodes leaving/entering???? and detection
