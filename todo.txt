UDP gossip seems to work now
    clean up code since it's really messy with

Have gossip send membership list

How does timestamp/heartbeat work again?
    timestamp used to deterimine when peer has failed
    
    Once a node registers a peer as Tfail, don't do anything if you receive heatbeat from the failed node - ignore it.
    Once Tcleanup passes, delete the node.


Test UDP listener the same port as TCP listener
    have nodes send datagram packets to members (except self) to see if they arrive correctly
    have the packets sent each second using a new gossiper thread

Gossiper
    start a new thread that contains a single while loop with a sleep function called inside
    this function wakes up every 1 second or so
    updates its own heartbeat counter, and then UDPs this list to a random neighbor (or round robin)

Membership protocol
    introducer and new nodes use tcp to make initial connection
    this allows introducer to update its own membership list and new node to get the initial membership list
    after this, at intervals the gossip protocol should occur (including the introducer) using a UDP connection
    will need to add UDP sockets to net.h

Each node will keep an array of messages it receives and reads them when necessary
    this allows us to not worry about connections (and to use UDP)

Nodes send messages to eachother at at set time interval
Nodes maintain a list of know members to gossip with
A single node is the introduce (port 3000), and all nodes first gossip with this node on startup

Implement a membership protocol (let's try gossip style heartbeating with fail/delete and suspicion)
    Consider looking at/using the API provided by the Coursera MP1 project
    failure must be reflected at one node within 3 seconds
        this requires heart-beating at least once per 1.5 seconds (if using 1.5 seconds for TFAIL and 1.5 seconds for TDELETE)
    failure must be reflected in all nodes within 6 seconds
    each machine must join with a version number (using fail-stop rather than fail-recovery model)
    use UDP for membership messaging
    log all joins, voluntary leaves and failures
    Implement a way to drop messages on receiver end (default to 0%)

Implement distributed system visualizer using SDL3
    Use logs to replay nodes leaving/entering???? and detection
