peer joins successfully tests
    start node 3000
    start node 3001
    ...
    start node 3007

    All 8 nodes should log peers that join/leave
    Ensure that all 8 logs contain 8 joins and 0 fails

Tests need to be quick, so maybe consider setting T_FAIL/T_CLEANUP to make testing fast - can do this after 

peer can't connect to introducer
    start node 3001
    ...
    start node 3007

    Ensure that all 7 logs contain 1 join each and 0 fails

write membership tests
    peer joins successfully
        should be checking logs
    peer fails joins (introducer down)
    one peer fails
    less than half peers fail
    more than half peers fail
    all non-introducer peers fail
    introducer fails
    introducer rejoins

Membership protocol
    introducer and new nodes use tcp to make initial connection
    this allows introducer to update its own membership list and new node to get the initial membership list
    after this, at intervals the gossip protocol should occur (including the introducer) using a UDP connection
    will need to add UDP sockets to net.h

Each node will keep an array of messages it receives and reads them when necessary
    this allows us to not worry about connections (and to use UDP)

Nodes send messages to eachother at at set time interval
Nodes maintain a list of know members to gossip with
A single node is the introduce (port 3000), and all nodes first gossip with this node on startup

Implement a membership protocol (let's try gossip style heartbeating with fail/delete and suspicion)
    Consider looking at/using the API provided by the Coursera MP1 project
    failure must be reflected at one node within 3 seconds
        this requires heart-beating at least once per 1.5 seconds (if using 1.5 seconds for TFAIL and 1.5 seconds for TDELETE)
    failure must be reflected in all nodes within 6 seconds
    each machine must join with a version number (using fail-stop rather than fail-recovery model)
    use UDP for membership messaging
    log all joins, voluntary leaves and failures
    Implement a way to drop messages on receiver end (default to 0%)

Implement distributed system visualizer using SDL3
    Use logs to replay nodes leaving/entering???? and detection
